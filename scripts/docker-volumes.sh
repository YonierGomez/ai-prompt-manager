#!/bin/bash

# Script de utilidades para gestionar vol√∫menes de Docker de AI Prompt Manager

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar ayuda
show_help() {
    echo -e "${BLUE}AI Prompt Manager - Gesti√≥n de Vol√∫menes Docker${NC}"
    echo ""
    echo "Uso: $0 [COMANDO]"
    echo ""
    echo "Comandos disponibles:"
    echo "  backup          Crear backup de los datos"
    echo "  restore         Restaurar backup de los datos"
    echo "  list            Listar vol√∫menes existentes"
    echo "  clean           Limpiar vol√∫menes no utilizados"
    echo "  reset           Resetear completamente los datos (¬°PELIGROSO!)"
    echo "  status          Mostrar estado de los vol√∫menes"
    echo "  help            Mostrar esta ayuda"
    echo ""
}

# Funci√≥n para crear backup
backup_data() {
    echo -e "${YELLOW}üì¶ Creando backup de los datos...${NC}"
    
    BACKUP_NAME="ai-prompt-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
    
    # Verificar que el volumen existe
    if ! docker volume inspect ai_prompt_data > /dev/null 2>&1; then
        echo -e "${RED}‚ùå El volumen ai_prompt_data no existe${NC}"
        exit 1
    fi
    
    # Crear backup
    docker run --rm \
        -v ai_prompt_data:/data \
        -v "$(pwd)":/backup \
        alpine tar czf "/backup/$BACKUP_NAME" -C /data .
    
    echo -e "${GREEN}‚úÖ Backup creado: $BACKUP_NAME${NC}"
}

# Funci√≥n para restaurar backup
restore_data() {
    if [ -z "$1" ]; then
        echo -e "${RED}‚ùå Debes especificar el archivo de backup${NC}"
        echo "Uso: $0 restore <archivo-backup.tar.gz>"
        exit 1
    fi
    
    if [ ! -f "$1" ]; then
        echo -e "${RED}‚ùå El archivo de backup no existe: $1${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}üì• Restaurando backup: $1${NC}"
    echo -e "${RED}‚ö†Ô∏è  Esto sobrescribir√° todos los datos existentes. ¬øContinuar? (y/N)${NC}"
    read -r response
    
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo "Operaci√≥n cancelada"
        exit 0
    fi
    
    # Restaurar backup
    docker run --rm \
        -v ai_prompt_data:/data \
        -v "$(pwd)":/backup \
        alpine tar xzf "/backup/$1" -C /data
    
    echo -e "${GREEN}‚úÖ Backup restaurado exitosamente${NC}"
}

# Funci√≥n para listar vol√∫menes
list_volumes() {
    echo -e "${BLUE}üìã Vol√∫menes de AI Prompt Manager:${NC}"
    docker volume ls | grep ai_prompt || echo "No se encontraron vol√∫menes"
}

# Funci√≥n para limpiar vol√∫menes no utilizados
clean_volumes() {
    echo -e "${YELLOW}üßπ Limpiando vol√∫menes no utilizados...${NC}"
    docker volume prune -f
    echo -e "${GREEN}‚úÖ Vol√∫menes limpiados${NC}"
}

# Funci√≥n para resetear datos
reset_data() {
    echo -e "${RED}‚ö†Ô∏è  PELIGRO: Esto eliminar√° TODOS los datos permanentemente${NC}"
    echo -e "${RED}¬øEst√°s seguro que quieres continuar? (escriba 'SI' para confirmar)${NC}"
    read -r response
    
    if [ "$response" != "SI" ]; then
        echo "Operaci√≥n cancelada"
        exit 0
    fi
    
    echo -e "${YELLOW}üóëÔ∏è  Eliminando vol√∫menes...${NC}"
    docker-compose down -v 2>/dev/null || true
    docker volume rm ai_prompt_data ai_prompt_uploads 2>/dev/null || true
    echo -e "${GREEN}‚úÖ Datos reseteados${NC}"
}

# Funci√≥n para mostrar estado
show_status() {
    echo -e "${BLUE}üìä Estado de los vol√∫menes:${NC}"
    echo ""
    
    # Verificar vol√∫menes
    for volume in ai_prompt_data ai_prompt_uploads; do
        if docker volume inspect "$volume" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ $volume: Existe${NC}"
            # Mostrar tama√±o aproximado
            size=$(docker run --rm -v "$volume":/data alpine du -sh /data 2>/dev/null | cut -f1)
            echo -e "   üì¶ Tama√±o: $size"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  $volume: No existe${NC}"
        fi
    done
    
    echo ""
    echo -e "${BLUE}üê≥ Estado del contenedor:${NC}"
    docker-compose ps 2>/dev/null || echo "Docker Compose no est√° ejecut√°ndose"
}

# Procesamiento de argumentos
case "${1:-help}" in
    backup)
        backup_data
        ;;
    restore)
        restore_data "$2"
        ;;
    list)
        list_volumes
        ;;
    clean)
        clean_volumes
        ;;
    reset)
        reset_data
        ;;
    status)
        show_status
        ;;
    help|*)
        show_help
        ;;
esac
